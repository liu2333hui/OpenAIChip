$date
	Mon Oct 21 19:00:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 32 ! Q [31:0] $end
$var reg 11 " A [10:0] $end
$var reg 11 # AM [10:0] $end
$var reg 1 $ AWT $end
$var reg 1 % BIST $end
$var reg 32 & BWEB [31:0] $end
$var reg 32 ' BWEBM [31:0] $end
$var reg 1 ( CEB $end
$var reg 1 ) CEBM $end
$var reg 1 * CLK $end
$var reg 32 + D [31:0] $end
$var reg 32 , DM [31:0] $end
$var reg 1 - PD $end
$var reg 2 . RTSEL [1:0] $end
$var reg 1 / WEB $end
$var reg 1 0 WEBM $end
$var reg 2 1 WTSEL [1:0] $end
$scope module sram $end
$var wire 11 2 A [10:0] $end
$var wire 11 3 AM [10:0] $end
$var wire 1 $ AWT $end
$var wire 1 4 AWT_i $end
$var wire 1 % BIST $end
$var wire 1 5 BIST_i $end
$var wire 32 6 BWEB [31:0] $end
$var wire 32 7 BWEBM [31:0] $end
$var wire 1 ( CEB $end
$var wire 1 ) CEBM $end
$var wire 1 8 CEBM_i $end
$var wire 1 9 CEB_i $end
$var wire 1 * CLK $end
$var wire 1 : CLK_i $end
$var wire 32 ; D [31:0] $end
$var wire 32 < DM [31:0] $end
$var wire 32 = MEMORY1 [31:0] $end
$var wire 32 > MEMORY2 [31:0] $end
$var wire 1 - PD $end
$var wire 1 ? PD_i $end
$var wire 2 @ RTSEL [1:0] $end
$var wire 1 / WEB $end
$var wire 1 0 WEBM $end
$var wire 1 A WEBM_i $end
$var wire 1 B WEB_i $end
$var wire 2 C WTSEL [1:0] $end
$var wire 1 D check_ceb $end
$var wire 1 E check_ceb_bist $end
$var wire 1 F check_ceb_norm $end
$var wire 1 G check_idle $end
$var wire 1 H check_noidle $end
$var wire 1 I check_noidle_bist $end
$var wire 1 J check_noidle_norm $end
$var wire 1 K check_nopd $end
$var wire 1 L check_nopd_bist $end
$var wire 1 M check_nopd_norm $end
$var wire 1 N check_read_bist $end
$var wire 1 O check_read_norm $end
$var wire 1 P check_write_bist $end
$var wire 1 Q check_write_norm $end
$var wire 1 R iWEB $end
$var wire 32 S iD [31:0] $end
$var wire 1 T iCEB $end
$var wire 32 U iBWEB [31:0] $end
$var wire 11 V iA [10:0] $end
$var wire 1 W check_write $end
$var wire 1 X check_read $end
$var wire 2 Y WTSEL_i [1:0] $end
$var wire 2 Z RTSEL_i [1:0] $end
$var wire 32 [ Q_i [31:0] $end
$var wire 32 \ Q [31:0] $end
$var wire 32 ] D_i [31:0] $end
$var wire 32 ^ DM_i [31:0] $end
$var wire 32 _ BWEB_i [31:0] $end
$var wire 32 ` BWEBM_i [31:0] $end
$var wire 11 a A_i [10:0] $end
$var wire 11 b AM_i [10:0] $end
$var parameter 272 c cdeFileInit $end
$var parameter 32 d numBit $end
$var parameter 32 e numCM $end
$var parameter 32 f numCMAddr $end
$var parameter 32 g numRow $end
$var parameter 32 h numRowAddr $end
$var parameter 32 i numStuckAt $end
$var parameter 32 j numWord $end
$var parameter 32 k numWordAddr $end
$var parameter 136 l preloadFile $end
$var real 1 m tAH $end
$var real 1 n tAS $end
$var real 1 o tAWTQ $end
$var real 1 p tAWTQH $end
$var real 1 q tBISTH $end
$var real 1 r tBISTS $end
$var real 1 s tBWH $end
$var real 1 t tBWQ $end
$var real 1 u tBWQH $end
$var real 1 v tBWS $end
$var real 1 w tCD $end
$var real 1 x tCH $end
$var real 1 y tCKH $end
$var real 1 z tCKL $end
$var real 1 { tCS $end
$var real 1 | tCYC $end
$var real 1 } tDH $end
$var real 1 ~ tDQ $end
$var real 1 !" tDQH $end
$var real 1 "" tDS $end
$var real 1 #" tHOLD $end
$var real 1 $" tPD $end
$var real 1 %" tPQ $end
$var real 1 &" tWH $end
$var real 1 '" tWK $end
$var real 1 (" tWS $end
$var reg 32 )" DIN_tmp [31:0] $end
$var reg 32 *" ERR_tmp [31:0] $end
$var reg 32 +" Q_awt [31:0] $end
$var reg 32 ," Q_d [31:0] $end
$var reg 1 -" clk_latch $end
$var reg 2 ." col_tmp [1:0] $end
$var reg 2 /" iColAddr [1:0] $end
$var reg 9 0" iRowAddr [8:0] $end
$var reg 1 1" idle_flag $end
$var reg 1 2" notify_addr $end
$var reg 1 3" notify_bist $end
$var reg 1 4" notify_bweb $end
$var reg 1 5" notify_ceb $end
$var reg 1 6" notify_clk $end
$var reg 1 7" notify_din $end
$var reg 1 8" notify_pd $end
$var reg 1 9" notify_web $end
$var reg 1 :" pd_mode $end
$var reg 1 X read_flag $end
$var reg 9 ;" row_tmp [8:0] $end
$var reg 1 W write_flag $end
$var integer 32 <" i [31:0] $end
$var integer 32 =" j [31:0] $end
$scope function getStuckAt0Index $end
$var reg 11 >" addr [10:0] $end
$var reg 21 ?" i [20:0] $end
$upscope $end
$scope function getStuckAt1Index $end
$var reg 11 @" addr [10:0] $end
$var reg 21 A" i [20:0] $end
$upscope $end
$scope function isStuckAt0 $end
$var reg 11 B" addr [10:0] $end
$var reg 1 C" flag $end
$var reg 21 D" i [20:0] $end
$upscope $end
$scope function isStuckAt1 $end
$var reg 11 E" addr [10:0] $end
$var reg 1 F" flag $end
$var reg 21 G" i [20:0] $end
$upscope $end
$scope task combineErrors $end
$var reg 11 H" addr [10:0] $end
$var reg 32 I" btmp [31:0] $end
$var reg 32 J" errors [31:0] $end
$var integer 32 K" j [31:0] $end
$upscope $end
$scope task injectSA $end
$var reg 11 L" addr [10:0] $end
$var reg 32 M" bitn [31:0] $end
$var reg 32 N" btmp [31:0] $end
$var reg 21 O" i [20:0] $end
$var reg 1 P" typen $end
$upscope $end
$scope task preloadData $end
$var reg 2 Q" col [1:0] $end
$var reg 9 R" row [8:0] $end
$var reg 12 S" w [11:0] $end
$upscope $end
$scope task printMemory $end
$var reg 2 T" col [1:0] $end
$var reg 3 U" col_index [2:0] $end
$var reg 9 V" row [8:0] $end
$var reg 10 W" row_index [9:0] $end
$upscope $end
$scope task printMemoryFromTo $end
$var reg 12 X" addr [11:0] $end
$var reg 11 Y" addr1 [10:0] $end
$var reg 11 Z" addr2 [10:0] $end
$var reg 2 [" col [1:0] $end
$var reg 9 \" row [8:0] $end
$upscope $end
$scope task xMemoryAll $end
$var reg 2 ]" col [1:0] $end
$var reg 3 ^" col_index [2:0] $end
$var reg 9 _" row [8:0] $end
$var reg 10 `" row_index [9:0] $end
$upscope $end
$scope task xMemoryWord $end
$var reg 11 a" addr [10:0] $end
$var reg 2 b" col [1:0] $end
$var reg 9 c" row [8:0] $end
$upscope $end
$upscope $end
$scope task preloadData $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
r0.232 ("
r7.825 '"
r0.031 &"
r7.113 %"
r1.206 $"
r0.718 #"
r0.242 ""
r0.133 !"
r0.645 ~
r0 }
r1.414 |
r0.345 {
r0.5659999999999999 z
r0.184 y
r0.034 x
r0.948 w
r0.295 v
r0.133 u
r0.645 t
r0 s
r0.6899999999999999 r
r0.047 q
r0.06 p
r0.443 o
r0.175 n
r0.029 m
b111001101110010011000010110110100101110011100000111001001100101011011000110111101100001011001000010111001100100011000010111010001100001 l
b1011 k
b100000000000 j
b10100 i
b1001 h
b1000000000 g
b10 f
b100 e
b100000 d
b1010100010100110011000101001110001101000011000001001100010100000100001000110010001100000011010000111000010110000011001100110010010011010011010001000110010101110100001001000001010111110110100101101110011010010111010001101001011000010110110000101110011000110110010001100101 c
$end
#0
$dumpvars
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
xP"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
xF"
bx E"
bx D"
xC"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
0:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
11"
bx 0"
bx /"
bx ."
0-"
bx ,"
bx +"
bx *"
bx )"
bx b
b0 a
bx `
b11111111111111111111111111111111 _
bx ^
b1 ]
bx \
bx [
b1 Z
b1 Y
0X
0W
b0 V
b11111111111111111111111111111111 U
0T
b1 S
1R
0Q
0P
0O
0N
1M
0L
1K
0J
0I
0H
1G
1F
0E
1D
b1 C
1B
1A
b1 @
0?
bx >
bx =
bx <
b1 ;
0:
09
18
bx 7
b11111111111111111111111111111111 6
05
04
bx 3
b0 2
b1 1
10
1/
b1 .
0-
bx ,
b1 +
0*
1)
0(
bx '
b11111111111111111111111111111111 &
0%
0$
bx #
b0 "
bx !
$end
#10
b11111111111111111111111111111110 +"
b10001000100010010001000100010 >
b10101011110011011010101111001101 =
b111111111 ;"
b11 ."
b100000000000 <"
#2000
1J
1O
1H
1X
0G
01"
b0 /"
b0 0"
1:
1*
#2001
b10101011110011011010101111001101 !
b10101011110011011010101111001101 \
b10101011110011011010101111001101 [
1-"
b10101011110011011010101111001101 ,"
#4000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#6000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
1:
1*
#6001
b10101011110011011010101111001101 !
b10101011110011011010101111001101 \
b10101011110011011010101111001101 [
1-"
b10101011110011011010101111001101 ,"
#8000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#10000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
b1 /"
1:
1*
b1 V
b1 a
b1 "
b1 2
#10001
b10001000100010010001000100010 !
b10001000100010010001000100010 \
b10001000100010010001000100010 [
1-"
b10001000100010010001000100010 ,"
#12000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#14000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
1:
1*
#14001
b10001000100010010001000100010 !
b10001000100010010001000100010 \
b10001000100010010001000100010 [
1-"
b10001000100010010001000100010 ,"
#16000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#18000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
1:
1*
#18001
b10001000100010010001000100010 !
b10001000100010010001000100010 \
b10001000100010010001000100010 [
1-"
b10001000100010010001000100010 ,"
#20000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
b10 V
b10 a
b10 "
b10 2
#22000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
b10 /"
1:
1*
#22001
b110011001100110100010001000100 !
b110011001100110100010001000100 \
b110011001100110100010001000100 [
1-"
b110011001100110100010001000100 ,"
#24000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#26000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
1:
1*
#26001
b110011001100110100010001000100 !
b110011001100110100010001000100 \
b110011001100110100010001000100 [
1-"
b110011001100110100010001000100 ,"
#28000
0J
0H
0O
0-"
1G
11"
0X
0:
0*
#30000
bx !
bx \
1J
bx [
1O
1H
bx ,"
1X
0G
01"
1:
1*
