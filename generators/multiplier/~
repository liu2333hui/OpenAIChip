Signed Multiplier ChengFa type
-------------------
Basic (*, 1 cycle)
ShiftMultiplier (<<, 1 cycle)
BoothMultiplier (<<, N/2 cycles or N/3 cycles)
StripesMultiplier (Parallel multiplier, N/2 cycles)
PragmaticMultiplier (Parallel multiplier, N/2 cycles)

Precision Set
-------------------
INT16
INT8
INT4
FP16
FP8
FP4

Mixed-Precision Sets
-------------------
INT16_8  // MAX_PRECISION = 16
INT16_8_4 // MAX_PRECISION = 16
INT8_4 // MAX_PRECISION = 8
FP16_8
FP16_8_4
FP8_4

API
-------------------
module generic_mult(
    input clk,
    input rst_n,
    input en, //power gating

    input [5:0] precision, // 4, 8, 16, 32 
    input [MAX_PRECISION-1:0] jia,
    input [MAX_PRECISION-1:0] yi,
    output [MAX_PRECISION*2 - 1: 0] zi,

    input valid,//data is valid and ready for processing
    output ready // data is ready and multiplied , because at most 16/2 cycles
    );

   //...todos

endmodule



CUSTOM MULTIPLIER
---------------------
Should first pass the functional test
module generic_mult_tb;

    reg clk;
    reg rst_n;
    reg en; //power gating

    reg [5:0] precision; // 4, 8, 16, 32 
    reg [MAX_PRECISION-1:0] jia;
    reg [MAX_PRECISION-1:0] yi;
    wire [MAX_PRECISION*2 - 1: 0] zi;

    reg valid; //data is valid and ready for processing
    wire ready; data is ready and multiplied 

    generic_mult mult_u(
       clk,
       rst_n,
   
       en, // clock gating
       
       precision, // only for multi-precision multipliers
       
       jia,
       yi,
       zi,

       valid,
       ready_toggle
    ); 


    initial begin
    clk = 0;
    #(CLK_PERIOD/2); clk = ~clk;
    end

    initial begin
    en = 1;
    precision = 8;
    jia = 0;
    yi = 0;
    valid = 0;
    rst_n = 1;
    #(CLK_PERIOD);
    rst_n = 0;
    #(CLK_PERIOD);
    rst_n = 1;

    //BEGIN TEST
    jia = 8;
    yi = 7;
    valid = 1;
    always@(ready_id)



    end



endmodule







