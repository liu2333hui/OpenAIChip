import pickle
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore", category=FutureWarning, module="sklearn.utils.validation")
#script generated by AI deepseek
import pickle
def log1p_inverse(x):
	return np.exp(x) - 1
def ones_count(x):
	"""计算数字 x 的二进制表示中 1 的个数"""
	return bin(x).count('1')

#use trained model and test / estimate on data
multicast_features = ['fanout', 'inv_CLOCK', 'cap_load',] + ['toggle']

def get_multicast_LUT(fanout, prec = 8, hardware = [1, 1.0]):
	
	data = np.zeros(( prec, len(multicast_features)))
	# data[:, 0] = prec #prec
	data[:, 0] = fanout #radix
	data[:, 1] = hardware[0] #clock
	data[:, 2] = hardware[1]	#cp load
	# data[:, 4] = mode
	for toggle in range(prec):
		data[toggle, 3] = toggle

	power = multicast_infer(data)
	return power
	
	
def multicast_infer(mult_data, model='generated/PowerModels/multicast.pkl'):
	with open(model,"rb") as f:
		model_loaded = pickle.load(f)
	# mult_features = ['prec1','radix', 'inv_CLOCK', 'cap_load',#, #'toggle_0', 'toggle_1',
	# 'in_0', 'in_1', 'bits_0', 'bits_1']
	mult_data=mult_data.reshape((-1, len(multicast_features)))
	mult_X = np.log1p(mult_data*1e5)
	mult_X = pd.DataFrame(mult_X, columns=multicast_features)
	mult_Y = log1p_inverse(model_loaded.predict(mult_X))/1e10
	return mult_Y

def multicast_infer_sequence(hardware, seq):
	data = np.zeros((len(seq), len(multicast_features)))
	for i in range(len(seq)):
		for l in range(len(hardware)):		
			data[i, l] = hardware[l]
			
	idx = 0	
	prev_a = seq[0]
	for a in seq[1:]:
		data[idx, len(hardware)+0] = ones_count(a ^ prev_a) 
		prev_a = a
		# data[idx, len(hardware)+0] = ones_count(a)
		idx = idx + 1
	data[idx, len(hardware)+0] = ones_count(prev_a ^ seq[0])
	res = multicast_infer(data)
	return res, np.sum(res)/len(res)
	
if __name__ == "__main__":
	
	# toggle vs. power
	# seq = [(123,11), (1,22), (41,3), (4,123)]
	seq = [ 0, 127, 192, 32, 39, 2, 2, 231 ]
	res = multicast_infer_sequence([1, 1, 0.1], [7,3,2,1,5,1,5,2,0,0])
	print(res)
	#res = multicast_infer_sequence([8, 1,0.1], seq)
	#print(res)
