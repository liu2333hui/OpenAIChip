// See LICENSE.txt for license details.
package memories

import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester}

import eda._
import tester.{Helper, TechNode, FullTester}
import chisel3._
import chisel3.util._
import scala.collection.mutable.Queue
import helper._




class SRAMSSpec(c: SRAMBankedASAP7, 
    TestVector : Map[String, Array[Int]] ,
    N: Int = 500,
	D: Int = 1 ) extends PeekPokeTester(c) {

	val write_data: Array[Int] = TestVector("write_data")
	val write_addr = TestVector("write_addr")
	val read_addr = TestVector("read_addr")

	var ram_map = Map[Int, Int]()
	for (i <- 0 until write_addr.length){
		ram_map = ram_map + (write_addr(i) -> write_data(i)) 
	}

	for (i <- 0 until N) {	
		
		//RAW
		for (j <- 0 until write_data.length){
			//Change for other technologies
			
			poke(c.io.write_address, write_addr(j)   )
			poke(c.io.rw_mode, 0)
			poke(c.io.banksel, 1)
			poke(c.io.write_data  , write_data(j))
			
			step(D)
		}

		for (j <- 0 until read_addr.length){
			//Change for other technologies
			
			poke(c.io.read_address, read_addr(j)   )
			poke(c.io.rw_mode, 1)
			poke(c.io.banksel, 1)
			step(D)
			expect(c.io.read_data  , ram_map(read_addr(j)))
			
			
		}
		
	}
    // println("TESTING AddN Complete\t"+ a(1)+"\t"+ b(1)+"\t"+ c)

}

object SRAMSSpec extends App{ 
		// Testing Params
		val N = 50
		val EDAVerification = false
		val ModuleName = "SRAMBankedASAP7"//Match class names
		val SpecName = s"${ModuleName}Spec"//Match class names
		val   TestName = "Train"
		
		val SkipSimulation = false
		val ForceSynthesis = false
		
		// Hardware Params
		val HardwareMap = Map(
			("entry_bits", Array(16, 32, 64) ),
			("rows",       Array( 256, 512, 1024)),
			("sram_type", Array("typical")),
			("tech",    Array("asap7"))
		)
		
		val TestVectorMap = Map(
			("write_data",Array(   Array(0,1,2,3,4,5,6,7,8,9,10) )),
			("write_addr", Array(  Array(0,1,2,3,4,5,6,7,8,9,10) )),
			("read_addr",Array(    Array(0,1,2,3,4,5,6,7,8,9,10) ))
		)
		
		val RuntimeMap = Map(("CLOCK", Array(1)),
							 ("cap_load", Array(0.010)),
							 ("fanout_load", Array(0.0))
		)
		
		
		class Tester extends FullTester{
			override def driver() = {
					Driver.execute(  Array("--generate-vcd-output" , "on",
					  "--top-name", this.SpecName,
					   "--target-dir", this.TargetDir), 
					   () => {
							// val m = new SimpleAdder2(this.HardwareConfig)
							// val m = new BankedSRAM(this.HardwareConfig)
							val m = new SRAMBankedASAP7(this.HardwareConfig)
							( m  ) 
					   })( c => {
						    val mspec = new SRAMSSpec(c, TestVector=this.TestVector, N=this.N,D=this.CLOCK) 
					   	    ( mspec )    
						} ) 
			}
		}
		
		val m = new Tester()
		m.run(HardwareMap,
				RuntimeMap, 
				TestVectorMap,
				N,
				ModuleName=ModuleName,
				TestName=TestName,
				SpecName=SpecName,
				EDAVerification = EDAVerification,
				SkipSimulation = SkipSimulation,
				ForceSynthesis = ForceSynthesis)
		println("done")
}


object SRAMSSpec extends App{ 
		// Testing Params
		val N = 50
		val EDAVerification = false
		val ModuleName = "SRAMBankedASAP7"//Match class names
		val SpecName = s"${ModuleName}Spec"//Match class names
		val   TestName = "Train"
		
		val SkipSimulation = false
		val ForceSynthesis = false
		
		// Hardware Params
		val HardwareMap = Map(
			("entry_bits", Array(16, 32, 64) ),
			("rows",       Array( 256, 512, 1024)),
			("sram_type", Array("typical")),
			("tech",    Array("asap7"))
		)
		
		val TestVectorMap = Map(
			("write_data",Array(   Array(0,1,2,3,4,5,6,7,8,9,10) )),
			("write_addr", Array(  Array(0,1,2,3,4,5,6,7,8,9,10) )),
			("read_addr",Array(    Array(0,1,2,3,4,5,6,7,8,9,10) ))
		)
		
		val RuntimeMap = Map(("CLOCK", Array(1)),
							 ("cap_load", Array(0.010)),
							 ("fanout_load", Array(0.0))
		)
		
		
		class Tester extends FullTester{
			override def driver() = {
					Driver.execute(  Array("--generate-vcd-output" , "on",
					  "--top-name", this.SpecName,
					   "--target-dir", this.TargetDir), 
					   () => {
							// val m = new SimpleAdder2(this.HardwareConfig)
							// val m = new BankedSRAM(this.HardwareConfig)
							val m = new SRAMBankedASAP7(this.HardwareConfig)
							( m  ) 
					   })( c => {
						    val mspec = new SRAMSSpec(c, TestVector=this.TestVector, N=this.N,D=this.CLOCK) 
					   	    ( mspec )    
						} ) 
			}
		}
		
		val m = new Tester()
		m.run(HardwareMap,
				RuntimeMap, 
				TestVectorMap,
				N,
				ModuleName=ModuleName,
				TestName=TestName,
				SpecName=SpecName,
				EDAVerification = EDAVerification,
				SkipSimulation = SkipSimulation,
				ForceSynthesis = ForceSynthesis)
		println("done")

}

// import sys.process._

// import eda._
// import tester.{Helper, TechNode, FullTester}

// import scala.reflect.runtime.universe._

// class ASAP7SramBankSpec(cc: Multicast, 
//     TestVector : Map[String, Array[Int]] ,
//     N: Int = 500,
// 	D: Int = 1 ) extends PeekPokeTester(cc) {
		
// 	val c = cc
		
// 	// for (z <- TestVector.keys){
// 	// 	print(z)
// 	// }
		
// 	  val a: Array[Int] = Array.fill(cc.terms)(TestVector("zhi1")(0))
// 	  val b: Array[Int] = Array.fill(cc.terms)(TestVector("zhis")(0))
// 	for (i <- 0 until N) {

// 		poke(c.io.en, 1)
// 		for (t <- 0 until c.terms){
// 			if(i % 2 == 0){
// 				poke(c.io.in(t) , a(t))
// 			}else{
// 				poke(c.io.in(t) , b(t))
// 			}
// 		}
		
// 		step(D)
		
// 		for (t <- 0 until c.terms){
// 			for (f <- 0 until c.fanout){
// 				if(i % 2 == 0)
// 					expect(c.io.out(t)(f), a(t))
// 				else
// 					expect(c.io.out(t)(f), b(t))
// 			}
// 		}
// 		// expect(c.io.Sum,a.reduce((x,y)=> x + y))
	
// 	}


// }



// class ASAP7SramBankTester extends FullTester{
	
// 	// HardwareConfig: Map[String,String],
// 		// TestVector : Map[String, Array[Int]], N : Int, CLOCK: Int, ModuleNameSpecName:String
// 	override def driver() = {

// 			Driver.execute(  Array("--generate-vcd-output" , "on",
// 			  "--top-name", this.SpecName,
// 			   "--target-dir", this.TargetDir), 
// 			   () => {
// 					val m = new Multicast(this.HardwareConfig)
// 					( m  ) 
// 			   })( c => {
// 				    val mspec = new MulticastSpec(c, TestVector=this.TestVector, N=this.N,D=this.CLOCK) 
// 			   	    ( mspec )  
					  
// 				} ) 

// 	}
	
// }


// object MulticastTester extends App{ 
// 		// Testing Params
// 		val N = 500
// 		val EDAVerification = false
// 		val ModuleName = "Multicast"//Match class names
// 		val SpecName = "MulticastSpec"//Match class names
// 		val   TestName = "Train"
		
		
// 		// Hardware Params
// 		val HardwareMap = Map(("terms",Array(2,16)),
// 							  ("fanout",Array(2,32)),
// 							  ("prec",Array(8)),
// 							  ("buffered",Array(true)),
// 							  ("tech",Array("tsmc40"))
// 		)
		
// 		val TestVectorMap = Map(("address",Array( Array(0), Array(0), Array(0) )),
// 							  ("data",Array(   Array(0)  , Array(1), Array(3) )),
							  
// 		)
		
// 		val RuntimeMap = Map(("CLOCK", Array(1)),
// 							 ("cap_load", Array(0.010)),
// 							 ("fanout_load", Array(0.0))
// 		)
		
// 		val m = new ASAP7SramBankTester()
// 		m.run(HardwareMap,
// 				RuntimeMap, 
// 				TestVectorMap,
// 				N,
// 				ModuleName=ModuleName,
// 				TestName=TestName,
// 				SpecName=SpecName,
// 				EDAVerification = EDAVerification,
// 				SkipSimulation = false,
// 				ForceSynthesis = false)
		

// }
